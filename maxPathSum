/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
pair<int,int>helper(TreeNode* root){
        if(root==NULL) {
            pair<int,int>p=make_pair(INT_MIN,0);
            return p;
        }
        pair<int,int>left=helper(root->left);
        pair<int,int>right=helper(root->right);
        int op1=left.first;
        int op2=right.first;
        int op3=left.second+ right.second+root->val;
        int maxi=max(op3,max(op1,op2));
        int temp=max(left.second, right.second)+root->val;
        temp=max(temp,0);
        return {maxi,temp};
    }
    int maxPathSum(TreeNode* root) {
        return helper(root).first ;
    }
};
