/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
    void insertatend(ListNode*&head,ListNode*&tail,int data){
        ListNode*n=new ListNode(data);
        if(head==NULL){
            head=tail=n;
        }
        else{
            tail->next=n;
            tail=n;
        }
    }    
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL && l2==NULL)
            return l1;
        else if(l1==NULL)
            return l2;
        else if(l2==NULL)
            return l1;

        ListNode*tail=NULL;
        ListNode*head=NULL;
        ListNode*h1=l1;
        ListNode*h2=l2;
        while(l1!=NULL && l2!=NULL){
            if(l1->val<=l2->val){
                insertatend(head,tail,l1->val);
                l1=l1->next;
            }
            else{
                insertatend(head,tail,l2->val);
                l2=l2->next;
            }
        }
        while(l1!=NULL){
            insertatend(head,tail,l1->val);
            l1=l1->next;
        }
        while(l2!=NULL){
            insertatend(head,tail,l2->val);
            l2=l2->next;
        }
        return head;
    }
};
//TC=O(N);
//SC=O(n)
